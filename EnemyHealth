using UnityEngine;
using UnityEngine.UI;

public class EnemyHealth : MonoBehaviour
{
    public Slider healthSlider; // 적 체력 슬라이더
    public Transform enemy; // 적의 위치
    public Vector3 offset; // 적의 체력바 위치

    public float maxHealth = 100f; // 최대 체력
    private float currentHealth; // 현재 체력

    public GameObject deathEffectPrefab;  // 적이 죽을 때 나타날 이펙트 프리팹
    public UIManager uiManager;  // UIManager를 참조 (인스펙터에서 연결)
    public Go_Main go_Main;

    private bool isAlive = true; // 적이 살아있는지 여부

    // TimerDamage 스크립트 참조를 위한 변수 추가
    private TimerDamage timerScript;

    void Start()
    {
        currentHealth = maxHealth; // 초기 체력 설정
        maxHealth = Mathf.Max(maxHealth, 1f); // 최대 체력이 1보다 작은 경우 1로 설정
        healthSlider.maxValue = maxHealth; // 슬라이더의 최대값을 최대 체력으로 설정
        healthSlider.value = currentHealth; // 슬라이더의 초기값 설정

        // UIManager가 제대로 연결되었는지 확인
        if (uiManager == null)
        {
            // UIManager를 찾을 수 없으면 씬 내에서 찾아보세요
            uiManager = FindAnyObjectByType<UIManager>();
            Debug.LogError("UIManager is not assigned in the Inspector!");
        }

        // TimerDamage 스크립트를 찾기
        timerScript = FindAnyObjectByType<TimerDamage>();
        if (timerScript == null)
        {
            Debug.LogError("TimerDamage script not found in the scene!");
        }
    }

    void Update()
    {
        // 체력바 위치를 적 위치 아래로 고정
        healthSlider.transform.position = Camera.main.WorldToScreenPoint(enemy.position + offset);
    }

    // 체력 감소 함수 (총알 등으로 피해를 받을 때 호출)
    public void TakeDamage(float damage)
    {
        currentHealth -= damage;
        currentHealth = Mathf.Clamp(currentHealth, 0, maxHealth); // 체력이 0보다 작지 않도록
        healthSlider.value = currentHealth; // 슬라이더 값 업데이트

        // 디버깅 메시지 출력
        Debug.Log("Current Health: " + currentHealth); // 체력 값 출력

        if (currentHealth <= 0)
        {
            Die();
        }
    }

    // 적이 죽을 때 처리
    void Die()
    {
        isAlive = false;  // 적이 죽었으므로 상태를 false로 변경
        Debug.Log("Enemy died. isAlive = " + isAlive);  // 로그 추가

        // 타이머 멈추기
        if (timerScript != null)
        {
            timerScript.timerFinished = true;  // 타이머를 멈춤
            Debug.Log("Timer stopped because the enemy is dead.");
        }

        // 적이 죽으면 추가 작업
        if (go_Main != null)
        {
            go_Main.Show();
        }

        // 죽을 때 이펙트 생성
        if (deathEffectPrefab != null)
        {
            Instantiate(deathEffectPrefab, transform.position, Quaternion.identity);
        }

        if (uiManager != null)
        {
            uiManager.ShowStageClear();
        }

        // 적 오브젝트 파괴
        Destroy(gameObject);
    }

    // 적이 살아있는지 확인하는 메서드
    public bool IsAlive()
    {
        return isAlive;
    }
}
