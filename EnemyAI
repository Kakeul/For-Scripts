using UnityEngine;

public class EnemyAI : MonoBehaviour
{
    // 플레이어와의 거리 계산을 위한 변수
    public Transform player; // 플레이어의 위치
    public float moveSpeed = 3f; // 이동 속도
    public float detectionRange = 10f; // 플레이어를 인식할 범위
    public float attackRange = 5f; // 총을 쏠 범위
    public GameObject bulletPrefab; // 총알 프리팹
    public Transform shootPoint; // 총알 발사 지점
    public float bulletSpeed = 10f; // 총알 속도
    public float timeBetweenShots = 0.3f; // x초에 한 번 총을 쏘는 시간 간격
    private float nextShotTime = 0f; // 총을 쏘기 위한 쿨타임

    // 점프 관련 변수
    public float jumpForce = 5f; // 점프 힘
    public float jumpCooldown = 2f; // 점프 쿨타임
    private float nextJumpTime = 0f; // 다음 점프 시간
    private bool isJumping = false; // 점프 중인지 여부

    // 적의 이동 범위
    public float leftBound = -5f; // 왼쪽 끝 범위
    public float rightBound = 5f; // 오른쪽 끝 범위
    private bool isMovingLeft = true; // 적의 이동 방향 (왼쪽으로)

    // 체력 관련 변수
    public float maxHealth = 100f; // 최대 체력
    private float currentHealth; // 현재 체력

    private UIManager uiManager; // UIManager 참조

    void Start()
    {
        // 초기화: 체력 설정
        currentHealth = maxHealth;

        // UIManager 찾기
        uiManager = Object.FindObjectOfType<UIManager>();
    }

    void Update()
    {
        // 플레이어와의 거리 계산
        float distanceToPlayer = Vector2.Distance(transform.position, player.position);

        // 플레이어가 탐지 범위에 있을 경우
        if (distanceToPlayer <= detectionRange)
        {
            // 플레이어가 공격 범위에 있을 경우
            if (distanceToPlayer <= attackRange)
            {
                // 쿨타임 체크 후 총을 쏨
                if (Time.time >= nextShotTime)
                {
                    ShootAtPlayer();
                    nextShotTime = Time.time + timeBetweenShots; // 다음 총을 쏘기 위한 쿨타임 설정
                }
            }

            // 좌우로 이동
            Move();

            // 점프 기능 (조건에 맞을 때 점프)
            if (Time.time >= nextJumpTime)
            {
                Jump();
                nextJumpTime = Time.time + jumpCooldown; // 점프 쿨타임 설정
            }
        }

        // 적의 체력이 0 이하일 때 스테이지 클리어 UI 표시
        if (currentHealth <= 0)
        {
            Die(); // 적의 체력이 0이면 사망 처리
        }
    }

    void ShootAtPlayer()
    {
        // 총알 발사
        if (bulletPrefab != null && shootPoint != null)
        {
            Bullet bullet = Instantiate(bulletPrefab, shootPoint.position, shootPoint.rotation).GetComponent<Bullet>();
            bullet.shooter = gameObject; // 발사한 객체를 shooter로 설정
            bullet.direction = (player.position - transform.position).normalized; // 플레이어 방향으로 발사
        }
        else
        {
            Debug.LogWarning("Bullet prefab or shootPoint is missing.");
        }
    }

    void Move()
    {
        // 좌우로 이동 (반복해서 왼쪽으로 이동하도록 설정)
        if (isMovingLeft)
        {
            transform.position = Vector2.MoveTowards(transform.position, new Vector2(leftBound, transform.position.y), moveSpeed * Time.deltaTime);
        }
        else
        {
            transform.position = Vector2.MoveTowards(transform.position, new Vector2(rightBound, transform.position.y), moveSpeed * Time.deltaTime);
        }

        // 적이 왼쪽 끝과 오른쪽 끝에 도달하면 방향을 바꿔준다.
        if (transform.position.x <= leftBound)
        {
            isMovingLeft = false; // 오른쪽으로 이동
        }
        else if (transform.position.x >= rightBound)
        {
            isMovingLeft = true; // 왼쪽으로 이동
        }
    }

    void Jump()
    {
        // 점프 로직 (Rigidbody2D가 필요)
        Rigidbody2D rb = GetComponent<Rigidbody2D>();
        if (rb != null && !isJumping)
        {
            rb.AddForce(Vector2.up * jumpForce, ForceMode2D.Impulse);
            isJumping = true; // 점프 중이라고 설정
        }
    }

    // 점프 후 바닥에 닿으면 다시 점프할 수 있게 설정
    private void OnCollisionEnter2D(Collision2D collision)
    {
        if (collision.gameObject.CompareTag("Ground"))
        {
            isJumping = false; // 바닥에 닿으면 점프 상태가 끝남
        }
    }

    // 적이 데미지를 받는 함수
    public void TakeDamage(float damage)
    {
        currentHealth -= damage;
        currentHealth = Mathf.Clamp(currentHealth, 0, maxHealth); // 체력이 0보다 작지 않도록

        if (currentHealth <= 0)
        {
            Die(); // 체력이 0이면 사망 처리
        }
    }

    // 적이 죽었을 때 처리
    void Die()
    {
        // 스테이지 클리어 UI 표시
        if (uiManager != null)
        {
            uiManager.ShowStageClear();
        }

        // 적의 죽음 처리 (적 오브젝트 파괴)
        Destroy(gameObject); // 적 오브젝트 파괴
    }
}
