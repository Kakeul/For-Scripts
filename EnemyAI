using UnityEngine;

public class EnemyAI : MonoBehaviour
{
    public Transform player; // 플레이어의 위치
    public float moveSpeed = 3f; // 이동 속도
    public float detectionRange = 10f; // 플레이어를 인식할 범위
    public float attackRange = 5f; // 총을 쏠 범위
    public GameObject bulletPrefab; // 총알 프리팹
    public Transform shootPoint; // 총알 발사 지점
    public float bulletSpeed = 10f; // 총알 속도

    private float timeBetweenShots = 2f; // 2초에 한 번 총을 쏘는 시간 간격
    private float nextShotTime = 0f; // 총을 쏘기 위한 쿨타임

    void Update()
    {
        // 플레이어와의 거리 계산
        float distanceToPlayer = Vector2.Distance(transform.position, player.position);

        // 플레이어가 탐지 범위에 있을 경우
        if (distanceToPlayer <= detectionRange)
        {
            if (distanceToPlayer <= attackRange)
            {
                if (Time.time >= nextShotTime) // 2초마다 총을 쏘게 만듬
                {
                    ShootAtPlayer();
                    nextShotTime = Time.time + timeBetweenShots; // 다음 총을 쏘기 위한 쿨타임 설정
                }
            }

            // 플레이어를 향해 회전
            RotateTowardsPlayer();
        }
    }

    void ShootAtPlayer()
    {
        if (bulletPrefab != null && shootPoint != null)
        {
            GameObject bullet = Instantiate(bulletPrefab, shootPoint.position, shootPoint.rotation);

            if (bullet != null)
            {
                Rigidbody2D bulletRb = bullet.GetComponent<Rigidbody2D>();
                if (bulletRb != null)
                {
                    bulletRb.linearVelocity = (player.position - transform.position).normalized * bulletSpeed;
                }
                else
                {
                    Debug.LogError("Bullet does not have Rigidbody2D component!");
                }
            }
        }
        else
        {
            Debug.LogWarning("Bullet prefab or shootPoint is missing.");
        }
    }

    void RotateTowardsPlayer()
    {
        // 플레이어의 방향을 향해 회전
        Vector2 direction = player.position - transform.position;
        float angle = Mathf.Atan2(direction.y, direction.x) * Mathf.Rad2Deg; // 플레이어 방향 계산
        transform.rotation = Quaternion.Euler(new Vector3(0, 0, angle)); // 적의 회전 적용
    }
}
