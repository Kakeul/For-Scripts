using UnityEngine;

public class EnemyAI : MonoBehaviour
{
    public Transform player; // 플레이어의 위치
    public float moveSpeed = 3f; // 이동 속도
    public float detectionRange = 10f; // 플레이어를 인식할 범위
    public float attackRange = 5f; // 총을 쏠 범위
    public GameObject bulletPrefab; // 총알 프리팹
    public Transform shootPoint; // 총알 발사 지점
    public float bulletSpeed = 10f; // 총알 속도
    public float timeBetweenShots = 0.3f; // x초에 한 번 총을 쏘는 시간 간격
    private float nextShotTime = 0f; // 총을 쏘기 위한 쿨타임

    public float jumpForce = 5f; // 점프 힘
    public float jumpCooldown = 2f; // 점프 쿨타임
    private float nextJumpTime = 0f; // 다음 점프 시간
    private bool isJumping = false; // 점프 중인지 여부

    public float leftBound = -5f; // 왼쪽 끝 범위
    public float rightBound = 5f; // 오른쪽 끝 범위
    private bool isMovingLeft = true; // 적의 이동 방향 (왼쪽으로)

    public bool hasTarget = false;  // 타겟팅 여부를 나타내는 변수
    private UIManager uiManager; // UIManager 참조

    void Start()
    {
        if (player == null)
        {
            player = GameObject.FindWithTag("Player")?.transform;
            if (player == null)
            {
                Debug.LogWarning("Player not found. Please assign a player to the EnemyAI script.");
            }
        }

        // UIManager 찾기 (FindAnyObjectByType 사용)
        uiManager = FindAnyObjectByType<UIManager>();
    }

    void Update()
    {
        // 플레이어가 null이거나 사망했으면 타겟팅을 멈추기
        if (player == null || !player.GetComponent<PlayerHealth>().IsAlive())
        {
            if (hasTarget)  // 이미 타겟을 멈췄다면
            {
                Debug.Log("Player is dead or destroyed. Stopping targetting.");
                hasTarget = false; // 더 이상 타겟팅하지 않음
            }
            return; // 플레이어가 없거나 죽으면 타겟팅 중지
        }

        float distanceToPlayer = Vector2.Distance(transform.position, player.position);

        if (distanceToPlayer <= detectionRange)
        {
            if (distanceToPlayer <= attackRange)
            {
                if (Time.time >= nextShotTime)
                {
                    ShootAtPlayer();
                    nextShotTime = Time.time + timeBetweenShots;
                }
            }

            Move();

            if (Time.time >= nextJumpTime)
            {
                Jump();
                nextJumpTime = Time.time + jumpCooldown;
            }
        }
    }

    void ShootAtPlayer()
    {
        if (bulletPrefab != null && shootPoint != null)
        {
            Bullet bullet = Instantiate(bulletPrefab, shootPoint.position, shootPoint.rotation).GetComponent<Bullet>();
            bullet.shooter = gameObject;

            // 플레이어가 있는 X축 방향으로만 발사
            float directionX = player.position.x - transform.position.x; // X축 차이만 계산
            bullet.direction = new Vector2(Mathf.Sign(directionX), 0).normalized; // Y값을 0으로 설정하여 수평으로만 발사
        }
        else
        {
            Debug.LogWarning("Bullet prefab or shootPoint is missing.");
        }
    }

    void Move()
    {
        if (isMovingLeft)
        {
            transform.position = Vector2.MoveTowards(transform.position, new Vector2(leftBound, transform.position.y), moveSpeed * Time.deltaTime);
        }
        else
        {
            transform.position = Vector2.MoveTowards(transform.position, new Vector2(rightBound, transform.position.y), moveSpeed * Time.deltaTime);
        }

        if (transform.position.x <= leftBound)
        {
            isMovingLeft = false;
        }
        else if (transform.position.x >= rightBound)
        {
            isMovingLeft = true;
        }
    }

    void Jump()
    {
        Rigidbody2D rb = GetComponent<Rigidbody2D>();
        if (rb != null && !isJumping)
        {
            rb.AddForce(Vector2.up * jumpForce, ForceMode2D.Impulse);
            isJumping = true;
        }
    }

    private void OnCollisionEnter2D(Collision2D collision)
    {
        if (collision.gameObject.CompareTag("Ground"))
        {
            isJumping = false;
        }
    }
}
