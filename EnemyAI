using UnityEngine;

public class EnemyAI : MonoBehaviour
{
    public Transform player; // 플레이어의 위치
    public float moveSpeed = 3f; // 이동 속도
    public float detectionRange = 10f; // 플레이어를 인식할 범위
    public float attackRange = 5f; // 총을 쏠 범위
    public GameObject bulletPrefab; // 총알 프리팹
    public Transform shootPoint; // 총알 발사 지점
    public float bulletSpeed = 10f; // 총알 속도

    private float timeBetweenShots = 2f; // 2초에 한 번 총을 쏘는 시간 간격
    private float nextShotTime = 0f; // 총을 쏘기 위한 쿨타임

    private bool isPlayerInRange = false;

    void Update()
    {
        // 플레이어와의 거리 계산
        float distanceToPlayer = Vector2.Distance(transform.position, player.position);

        // 플레이어가 탐지 범위에 있을 경우
        if (distanceToPlayer <= detectionRange)
        {
            isPlayerInRange = true;
            if (distanceToPlayer <= attackRange)
            {
                if (Time.time >= nextShotTime) // 2초마다 총을 쏘게 만듬
                {
                    ShootAtPlayer();
                    nextShotTime = Time.time + timeBetweenShots; // 다음 총을 쏘기 위한 쿨타임 설정
                }
            }
            else
            {
                MoveTowardsPlayer(); // 플레이어를 향해 이동
            }

            // 플레이어의 위치에 따라 적의 방향을 조정
            FlipTowardsPlayer();
        }
        else
        {
            isPlayerInRange = false;
        }

        // 발사 지점 위치를 플레이어 방향에 맞게 조정
        AdjustShootPointPosition();
    }

    void MoveTowardsPlayer()
    {
        if (!isPlayerInRange) return;

        // 플레이어의 위치로 이동
        Vector2 direction = (player.position - transform.position).normalized;
        transform.position = Vector2.MoveTowards(transform.position, player.position, moveSpeed * Time.deltaTime);
    }

    void ShootAtPlayer()
    {
        if (bulletPrefab != null && shootPoint != null)
        {
            GameObject bullet = Instantiate(bulletPrefab, shootPoint.position, shootPoint.rotation);
            Bullet bulletScript = bullet.GetComponent<Bullet>();

            if (bulletScript != null)
            {
                // 총알의 발사 방향 설정 (플레이어 방향)
                Vector2 direction = (player.position - transform.position).normalized;
                bulletScript.direction = direction;

                // 총알의 발사자 설정
                bulletScript.shooter = gameObject;
            }
            else
            {
                Debug.LogError("Bullet prefab does not have a Bullet script attached!");
            }
        }
        else
        {
            Debug.LogError("Bullet prefab or shootPoint is missing.");
        }
    }

    // 발사 지점 위치를 플레이어 방향에 맞게 조정
    void AdjustShootPointPosition()
    {
        if (transform.localScale.x > 0) // 오른쪽을 보고 있을 때
        {
            shootPoint.localPosition = new Vector3(1f, shootPoint.localPosition.y, shootPoint.localPosition.z); // 오른쪽에 발사 위치 설정
        }
        else // 왼쪽을 보고 있을 때
        {
            shootPoint.localPosition = new Vector3(-1f, shootPoint.localPosition.y, shootPoint.localPosition.z); // 왼쪽에 발사 위치 설정
        }
    }

    // 플레이어의 위치에 따라 적의 방향을 반전
    void FlipTowardsPlayer()
    {
        // 플레이어가 적의 왼쪽에 있으면 왼쪽을 보고, 오른쪽에 있으면 오른쪽을 봄
        if (player.position.x < transform.position.x && transform.localScale.x > 0) // 플레이어가 왼쪽에 있을 때
        {
            Flip(); // 왼쪽을 보기 위해 flip
        }
        else if (player.position.x > transform.position.x && transform.localScale.x < 0) // 플레이어가 오른쪽에 있을 때
        {
            Flip(); // 오른쪽을 보기 위해 flip
        }
    }

    // Flip the character to face the player
    void Flip()
    {
        // `localScale.x` 값을 반전시켜서 왼쪽 또는 오른쪽을 보도록 만듦
        Vector3 scale = transform.localScale;
        scale.x *= -1; // x값을 반전시켜서 방향 전환
        transform.localScale = scale;
    }
}
